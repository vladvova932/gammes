{
    "plugins": [
        "dspreprocess"
    ],
    "env": {
        "browser": true,
        "amd": true,
        "jasmine": true,
        "es6": true
    },

    "extends": "eslint:recommended",

    "globals": {
    },

    // Reference: http://eslint.org/docs/rules/
    // "off" or 0 - turn the rule off
    // "warn" or 1 - turn the rule on as a warning (doesn't affect exit code)
    // "error" or 2 - turn the rule on as an error (exit code is 1 when triggered)
    //
    "rules": {
        //
        // Possible Errors
        //

        "no-compare-neg-zero": 2,  // disallow comparing against -0
        "no-cond-assign": [  // disallow assignment operators in conditional expressions
            2,
            "except-parens"  // Except if they are enclosed in parentheses
        ],
        "no-constant-condition": 1, // disallow constant expressions in conditions
        "no-control-regex": 1, // disallow control characters in regular expressions
        "no-inner-declarations": 0, // disallow variable or function declarations in nested blocks
        "no-irregular-whitespace": 1, // disallow irregular whitespace outside of strings and comments
        "no-template-curly-in-string": 1, // disallow template literal placeholder syntax in regular strings
        "valid-jsdoc": [ // enforce valid JSDoc comments
            2,
            {"requireReturn": false} // enforce @return only if function returns a value
        ],

        //
        // Best Practices
        //
        "accessor-pairs": 1, // enforce getter and setter pairs in objects
        "array-callback-return": 2, // enforce return statements in callbacks of array methods
        "block-scoped-var": 1, // enforce the use of variables within the scope they are defined
        "class-methods-use-this": 1, // enforce that class methods utilize this
        "complexity": 2, // enforce a maximum cyclomatic complexity allowed in a program
        "consistent-return": 2, // require return statements to either always or never specify values
        "curly": 2, // enforce consistent brace style for all control statements
        "default-case": 1, // require default cases in switch statements
        "dot-location": [ // enforce consistent newlines before and after dots
            1,
            "object"
        ],
        "dot-notation": [ // enforce dot notation whenever possible
            2,
            { "allowPattern": "^(abstract|arguments|await|boolean|break|byte|case|catch|char|class|const|continue|debugger|default|delete|do|double|else|enum|eval|export|extends|false|final|finally|float|for|function|goto|if|implements|import|in|instanceof|int|interface|let|long|native|new|null|package|private|protected|public|return|short|static|super|switch|synchronized|this|throw|throws|transient|true|try|typeof|var|void|volatile|while|with|yield)$" }
        ],
        "eqeqeq": 2, // require the use of === and !==
        "no-alert": 2, // disallow the use of alert, confirm, and prompt
        "no-caller": 2, // disallow the use of arguments.caller or arguments.callee
        "no-eq-null": 2, // disallow null comparisons without type-checking operators
        "no-eval": 2, // disallow the use of eval()
        "no-extend-native": 1, // disallow extending native types
        "no-extra-bind": 2, // disallow unnecessary calls to .bind()
        "no-extra-label": 2, // disallow unnecessary labels
        "no-fallthrough": 1, // disallow fallthrough of case statements
        "no-implicit-coercion": 1, // disallow shorthand type conversions
        "no-implied-eval": 2, // disallow the use of eval()-like methods
        "no-lone-blocks": 2, // disallow unnecessary nested blocks
        "no-loop-func": 2, // disallow function declarations and expressions inside loop statements
        "no-magic-numbers": 0, // disallow magic numbers
        "no-new": 2, // disallow new operators outside of assignments or comparisons
        "no-new-func": 2, // disallow new operators with the Function object
        "no-new-wrappers": 2, // disallow new operators with the String, Number, and Boolean objects
        "no-octal-escape": 2, // disallow octal escape sequences in string literals
        "no-return-assign": 2, // disallow assignment operators in return statements
        "no-return-await": 2, // disallow unnecessary return await
        "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
        "no-throw-literal": 2, // disallow throwing literals as exceptions
        "no-unmodified-loop-condition": 2, // disallow unmodified loop conditions
        "no-unused-expressions": [ // disallow unused expressions
            2,
            {"allowShortCircuit": true,
             "allowTernary": true
            } 
        ],
        "no-useless-call": 2, // disallow unnecessary calls to .call() and .apply()
        "no-useless-escape": 2, // disallow unnecessary escape characters
        "no-useless-return": 2, // disallow redundant return statements
        "no-void": 2, // disallow void operators
        "no-warning-comments": [ // disallow specified warning terms in comments
            1,
            // Report all FIXME and TODO comments as warnings
            {"terms": ["todo", "fixme"], "location": "start"}
        ],
        "no-with": 2, // disallow with statements
        "object-shorthand": ["error", "never"], // require or disallow method and property shorthand syntax for object literals
        "prefer-promise-reject-errors": 2, // require using Error objects as Promise rejection reasons
        "wrap-iife": [ // require parentheses around immediate function invocations
            2,
            "any"
        ],

        //
        // Strict Mode
        //
        "strict": [ // require or disallow strict mode directives
            2,
            "safe"
        ],

        //
        // Variables
        //
        "no-label-var": 2, // disallow labels that share a name with a variable
        "no-unused-vars": [ // disallow unused variables
            2,
            { "args": "after-used" }
        ],
        "no-use-before-define": 2, // disallow the use of variables before they are defined

        //
        // Stylistic Issues
        //

        "comma-dangle": [ // require or disallow trailing commas
            1,
            "never"
        ],
        "comma-spacing": [ // enforce consistent spacing before and after commas
            1,
            { "before": false, "after": true }
        ],
        "comma-style": [ // enforce consistent comma style
            1,
            "last"
        ],
        "eol-last":  2, // require or disallow newline at the end of files
        "func-call-spacing": 1, // require or disallow spacing between function identifiers and their invocations
        "keyword-spacing": 1, // enforce consistent spacing before and after keywords
        "max-len": [ // enforce a maximum line length
            2,
            {
                "code": 200,
                "ignoreUrls": true,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true
            }],
        "new-cap": [ // require constructor names to begin with a capital letter
            2,
            { "properties": false }
        ],
        "no-array-constructor": 2, // disallow Array constructors
        "no-bitwise": 1, // disallow bitwise operators
        "no-mixed-spaces-and-tabs": 0, // disallow mixed spaces and tabs for indentation
        "no-new-object": 2, // disallow Object constructors
        "no-trailing-spaces": 1, // disallow trailing whitespace at the end of lines
        "no-unneeded-ternary": 2, // disallow ternary operators when simpler alternatives exist
        "quote-props": [ // require quotes around object literal property names
            2,
            "as-needed",
            { "keywords": true }
        ],
        "quotes": [ // enforce the consistent use of either backticks, double, or single quotes
            1,
            "single",
            { "avoidEscape": true }
        ],
        "require-jsdoc": 2, // require JSDoc comments
        "semi": [ // require or disallow semicolons instead of ASI
            2,
            "always"
        ]
    }
}
